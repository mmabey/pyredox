# -*- coding: utf-8 -*-
# ----  AUTO-GENERATED BY gen_redox_lib. DO NOT MODIFY MANUALLY!!  ---- #

from __future__ import annotations

from typing import List, Union

from pydantic import Field

from pyredox import scheduling
from ..abstract_base import GenericEventTypeAbstractModel
from . import types as generic


class _Scheduling(GenericEventTypeAbstractModel):
    _redox_module = scheduling


class AvailableSlots(_Scheduling):
    EndDateTime_: Union[str, None] = Field(None, alias="EndDateTime")
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    StartDateTime_: str = Field(..., alias="StartDateTime")
    Visit_: generic.Visit = Field(None, alias="Visit")


class AvailableSlotsResponse(_Scheduling):
    AvailableSlots_: List[generic.AvailableSlot] = Field(..., alias="AvailableSlots")
    Meta_: generic.Meta = Field(..., alias="Meta")


class Booked(_Scheduling):
    EndDateTime_: Union[str, None] = Field(None, alias="EndDateTime")
    Meta_: generic.Meta = Field(..., alias="Meta")
    StartDateTime_: str = Field(..., alias="StartDateTime")
    Visit_: generic.Visit = Field(None, alias="Visit")


class BookedResponse(_Scheduling):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Visits_: List[generic.Visit] = Field(..., alias="Visits")


class Cancel(_Scheduling):
    AppointmentInfo_: List[generic.AppointmentInfo] = Field(
        None, alias="AppointmentInfo"
    )
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    Visit_: generic.Visit = Field(..., alias="Visit")


class Modification(_Scheduling):
    AppointmentInfo_: List[generic.AppointmentInfo] = Field(
        None, alias="AppointmentInfo"
    )
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    Visit_: generic.Visit = Field(..., alias="Visit")


class New(_Scheduling):
    AppointmentInfo_: List[generic.AppointmentInfo] = Field(
        None, alias="AppointmentInfo"
    )
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    Visit_: generic.Visit = Field(..., alias="Visit")


class NoShow(_Scheduling):
    AppointmentInfo_: List[generic.AppointmentInfo] = Field(
        None, alias="AppointmentInfo"
    )
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    Visit_: generic.Visit = Field(..., alias="Visit")


class PushSlots(_Scheduling):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Slots_: List[generic.Slot] = Field(..., alias="Slots")


class Reschedule(_Scheduling):
    AppointmentInfo_: List[generic.AppointmentInfo] = Field(
        None, alias="AppointmentInfo"
    )
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(None, alias="Patient")
    Visit_: generic.Visit = Field(..., alias="Visit")
