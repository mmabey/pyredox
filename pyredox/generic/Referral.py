# -*- coding: utf-8 -*-
# ----  AUTO-GENERATED BY gen_redox_lib. DO NOT MODIFY MANUALLY!!  ---- #

from __future__ import annotations

from typing import List

from pydantic import Field

from pyredox import referral
from ..abstract_base import GenericEventTypeAbstractModel
from . import types as generic


class _Referral(GenericEventTypeAbstractModel):
    _redox_module = referral


class AuthResponse(_Referral):
    Authorization_: generic.Authorization = Field(None, alias="Authorization")
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")
    Referral_: generic.Referral = Field(None, alias="Referral")


class AuthReview(_Referral):
    Authorization_: generic.Authorization = Field(None, alias="Authorization")
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")
    Referral_: generic.Referral = Field(None, alias="Referral")


class Cancel(_Referral):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")
    Referral_: generic.Referral = Field(None, alias="Referral")
    Visit_: generic.Visit = Field(None, alias="Visit")


class Modify(_Referral):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")
    Referral_: generic.Referral = Field(None, alias="Referral")
    Visit_: generic.Visit = Field(None, alias="Visit")


class New(_Referral):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")
    Referral_: generic.Referral = Field(None, alias="Referral")
    Visit_: generic.Visit = Field(None, alias="Visit")


class Query(_Referral):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Patient_: generic.Patient = Field(..., alias="Patient")


class QueryResponse(_Referral):
    Meta_: generic.Meta = Field(..., alias="Meta")
    Referrals_: List[generic.Referral] = Field(None, alias="Referrals")
